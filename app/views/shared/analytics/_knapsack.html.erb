<% if !current_user.can_see_exact_results?(@election) %>
  <p class="alert alert-warning" role="alert">
    <b>Note:</b> The vote counts below have been rounded to protect the voters' privacy.
    The allocation may not be accurate.
  </p>
<% end %>

<!--
FIXME: Currently not working. Need to fix this.
<a href="<%= url_for(format: :csv, table: 'knapsacks') %>">Export into Excel</a><br>
-->

<% if current_user.can_see_voter_data?(@election) %>
  <div style="float: right;">
    <a href="<%= url_for(format: :pb, table: 'knapsacks') %>">Export to PB file</a>
    <span class="dropdown">
      | <a class="dropdown-toggle" id="knapsackExportDropdown" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
        Export to Excel
      </a>
      <div class="dropdown-menu dropdown-menu-right" aria-labelledby="knapsackExportDropdown">
        <a class="dropdown-item" href="<%= url_for(format: :csv, table: 'knapsacks_individual') %>">Individual votes</a>
      </div>
    </span>
  </div>
<% end %>

<div class="mb-2">
  <ul class="nav formatSelector" role="tablist">
    <li class="nav-item">
      <a id="knapsack-table-tab" class="active" data-toggle="tab" href="#knapsack-table-pane" role="tab" aria-controls="knapsack-table-pane" aria-selected="true">Table</a> |
    </li>
    <li class="nav-item">
      <a id="knapsack-chart-tab" data-toggle="tab" href="#knapsack-chart" role="tab" aria-controls="knapsack-chart" aria-selected="false">Chart</a> |
    </li>
    <!--
    <li class="nav-item">
      <a id="knapsack-pieChart-tab" data-toggle="tab" href="#knapsack-pieChart" role="tab" aria-controls="knapsack-pieChart" aria-selected="false">Pie chart</a> |
    </li>
    -->
    <li class="nav-item">
      <a id="knapsack-voteCountByDay-tab" data-toggle="tab" href="#knapsack-voteCountByDay" role="tab" aria-controls="knapsack-voteCountByDay" aria-selected="false">Vote count by day</a>
    </li>
  </ul>
</div>

<div class="form-inline">
  <div class="form-group">
    <label for="knapsack-tiebreaking">Tie-breaking method:</label>
    &nbsp;
    <select class="form-control" id="knapsack-tiebreaking">
      <option value="increasing">Increasing cost</option>
      <option value="fractional">Fractional</option>
      <option value="equalizing">Equalizing</option>
    </select>
  </div>
</div>

<div class="tab-content">
  <div class="tab-pane show active" id="knapsack-table-pane" role="tabpanel" aria-labelledby="knapsack-table-tab">
    <div class="form-check" style="float: right;">
      <input class="form-check-input" type="checkbox" value="" id="knapsack-show-details">
      <label class="form-check-label" for="knapsack-show-details">
        Show details
      </label>
    </div>
    <div id="knapsack-table"></div>
  </div>
  <div class="tab-pane" id="knapsack-chart" role="tabpanel" aria-labelledby="knapsack-chart-tab">
  </div>
  <!--
  <div class="tab-pane" id="knapsack-pieChart" role="tabpanel" aria-labelledby="knapsack-pieChart-tab">
  </div>
  -->
  <div class="tab-pane" id="knapsack-voteCountByDay" role="tabpanel" aria-labelledby="knapsack-voteCountByDay-tab">
    <table class="table table-bordered table-sm">
      <thead class="thead-light">
        <tr>
          <th></th>
          <th>Votes</th>
        </tr>
      </thead>
      <tbody>
        <% @analytics_data[:knapsack][:knapsack_voters_by_date].each do |v| %>
          <tr>
            <td><%= v.date.strftime('%a, %B %e, %Y') %></td>
            <td><%= number_with_delimiter(v.vote_count) %></td>
          </tr>
        <% end %>
        <tr>
          <td><b>Total</b></td>
          <td><%= number_with_delimiter(@analytics_data[:knapsack][:knapsack_total]) %> </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>



<style>
.knapsack-bar-rect {
  stroke: #999999;
}
.knapsack-bar-text {
  fill: #333333;
  text-anchor: middle;
  pointer-events: none;
}
.knapsack-bar-text-hidden {
  display: none;
}
.knapsack-bar-allocation {
  pointer-events: none;
}
.knapsack-bar:hover .knapsack-bar-rect {
  stroke: black;
}
.knapsack-bar:hover .knapsack-bar-text-hidden {
  display: inline;
}
</style>

<script type="text/javascript">
function roundToTwo(x) {
  return Math.round(x * 100) / 100;
}

var showKnapsackDetails = false;

// Knapsack table.
function reloadKnapsackTable() {
  var knapsack_data = analytics_data.knapsack.knapsack_data;

  var table = document.createElement('table');
  table.className = 'table table-bordered table-sm';

  // Header
  var thead = document.createElement('thead');
  thead.className = 'thead-light';
  {
    var tr = document.createElement('tr');

    {
      var th = document.createElement('th');
      th.textContent = 'Project';
      tr.appendChild(th);

      th = document.createElement('th');
      th.textContent = 'Votes';
      tr.appendChild(th);

      if (showKnapsackDetails) {
        th = document.createElement('th');
        th.textContent = 'Discrete';
        tr.appendChild(th);

        th = document.createElement('th');
        th.textContent = 'Partial';
        tr.appendChild(th);
      }

      th = document.createElement('th');
      th.textContent = 'Allocation';
      tr.appendChild(th);
    }

    thead.appendChild(tr);
  }
  table.appendChild(thead);

  // Rows for projects
  var tbody = document.createElement('tbody');
  for (var i = 0; i < knapsack_data.length; ++i) {
    var tr = document.createElement('tr');
    var knapsack_row = knapsack_data[i];
    var project = projects[idToIndex[knapsack_row.id]];

    {
      // Title
      var td = document.createElement('td');
      td.textContent = project.title;
      tr.appendChild(td);

      // Votes
      var cumulativeVoteCount = 0;
      var first = true;
      td = document.createElement('td');
      td.className = "text-right";
      var s = "";
      for (var j = 0; j < knapsack_row.votes.length; ++j) {
        var voteCount = knapsack_row.votes[j][1];
        cumulativeVoteCount += voteCount;
        if (showKnapsackDetails && cumulativeVoteCount >= analytics_data.knapsack.knapsack_discrete_vote && first) {
          s += "<b>";
        }
        s += (costWithDelimiter(knapsack_row.votes[j][0], currency_symbol)) + " - " + voteCount;
        if (showKnapsackDetails && showKnapsackDetails) {
          s += " (" + cumulativeVoteCount + ")";
        }
        if (cumulativeVoteCount >= analytics_data.knapsack.knapsack_discrete_vote && first) {
          s += "</b>";
          first = false;
        }
        s += "<br>";
      }
      td.innerHTML = s;
      tr.appendChild(td);

      if (showKnapsackDetails) {
        // Discrete allocation
        td = document.createElement('td');
        td.className = "text-right";
        td.textContent = costWithDelimiter(roundToTwo(knapsack_row.discrete_allocation), currency_symbol);
        tr.appendChild(td);

        // Partial allocation
        td = document.createElement('td');
        td.className = "text-right";
        td.textContent = costWithDelimiter(roundToTwo(knapsack_row.partial_allocation), currency_symbol);
        if (analytics_data.knapsack.knapsack_partial_project_ids.indexOf(knapsack_row.id) == -1) {
          td.style.color = "transparent";
        }
        tr.appendChild(td);
      }

      // Total allocation
      td = document.createElement('td');
      td.className = "text-right";
      td.textContent = costWithDelimiter(roundToTwo(knapsack_row.allocation), currency_symbol);
      tr.appendChild(td);
    }

    tbody.appendChild(tr);
  }
  table.appendChild(tbody);

  document.getElementById('knapsack-table').innerHTML = '';
  document.getElementById('knapsack-table').appendChild(table);
}

reloadKnapsackTable();

document.getElementById('knapsack-show-details').addEventListener('change', function(event) {
  showKnapsackDetails = event.target.checked;
  reloadKnapsackTable();
});

document.getElementById('knapsack-tiebreaking').addEventListener('change', function(event) {
  reloadData({knapsack_partial: event.target.value});
});



function reloadKnapsackChart() {
  var knapsack_data = analytics_data.knapsack.knapsack_data.slice(0);
  var knapsack_max_vote_count = analytics_data.knapsack.knapsack_max_vote_count;

  // knapsack_data is an array of objects whose keys and values are
  // - id: project's id
  // - votes: an array of votes for the project. Each vote is an array of length 2: [cost, vote_count]
  // - allocation: how much money is allocated to the project

  // Sort the projects by allocation
  knapsack_data.sort(function(a, b) { return b.allocation - a.allocation; });

  // Sort the votes for each project by cost and calculate various values for each vote.
  knapsack_data.forEach(function(project) {
    var votes = project.votes;
    // votes.sort(function(a, b) { return b[0] - a[0]; }); // Larger cost to smaller cost.

    var cumulativeVoteCount = 0;
    for (var i = 0; i < votes.length; ++i) {
      // Calculate cumulative vote counts.
      cumulativeVoteCount += votes[i][1];
      votes[i][2] = cumulativeVoteCount;

      // Calculate cost differences. (This project's cost - next project's cost)
      votes[i][3] = votes[i][0] - ((i + 1 < votes.length) ? votes[i + 1][0] : 0);

      // Set project ID for each vote to facilitate D3.
      votes[i][4] = project.id;
    }

    // Each vote is [cost, vote_count, cumulative_vote_count, cost_difference, project_id]
  });

  var actualHeight = Math.min(700, knapsack_data.length * 40);

  var margin = {top: 30, right: 50, bottom: 50, left: 200},
    width = 960 - margin.left - margin.right;
  document.getElementById("knapsack-chart").innerHTML = "";
  var svg = d3.select("#knapsack-chart")
    .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", actualHeight + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var x = d3.scaleLinear().range([0, width]);
  var y = d3.scaleBand().rangeRound([0, actualHeight]).padding(.3);

  x.domain([0, d3.max(projects, function(project) { return project.cost; })]);
  y.domain(knapsack_data.map(function(d) { return d.id; }));

  var xAxis = d3.axisBottom()
    .scale(x);

  var yAxis = d3.axisLeft()
    .scale(y);

  // SVG path data for the allocation.
  var allocationPathData = "";
  allocationPathData += "M" + x(knapsack_data[0].allocation) + " " + y(knapsack_data[0].id) + " ";
  for (var i = 0; i < knapsack_data.length; ++i) {
    if (knapsack_data[i].allocation == 0)
      break;
    var smooth = 8;
    allocationPathData += "l0 " + y.bandwidth() + " ";
    if (i + 1 < knapsack_data.length) {
      allocationPathData += "C" + x(knapsack_data[i].allocation) + " " + (y(knapsack_data[i].id) + y.bandwidth() + smooth) + " " +
        x(knapsack_data[i + 1].allocation) + " " + (y(knapsack_data[i + 1].id) - smooth) + " " +
        x(knapsack_data[i + 1].allocation) + " " + y(knapsack_data[i + 1].id) + " ";
    }
  }

  // Coloring function.
  var knapsackColor = function(voteCount) {
    var t = voteCount / knapsack_max_vote_count;
    var r = 70, g = 130, b = 180;
    var interpolate = function(x, t) { // Map t:[0, 1] to [255, x].
      return Math.round(255 - (255 - x) * t);
    };
    return "rgb(" + interpolate(r, t) + "," + interpolate(g, t) + "," + interpolate(b, t) + ")";
  }

  // Function for truncating long text with an ellipsis ("...").
  function wrapText() {
    var self = d3.select(this);
    var text = self.text();
    while (this.getComputedTextLength() > margin.left - 10 && text.length > 0) {
      text = text.slice(0, -1);
      self.text(text + "...");
    }
  }

  // x-axis.
  svg.append("g")
      .attr("class", "axis")
      .attr("transform", "translate(0," + actualHeight + ")")
      .call(xAxis)
    .append("text")
      .text("Cost")
      .attr("x", width + 4);

  // y-axis.
  svg.append("g")
    .attr("class", "axis")
    .call(yAxis)
    .selectAll("text")
      .text(function(id) { return projects[idToIndex[id]].title; })
      .style("text-anchor", "end")
      .each(wrapText);

  // Background color for allocation.
  svg.append("path")
    .attr("d", allocationPathData + "L" + x(0) + " " + (y(knapsack_data[0].id)) )
    .style("stroke", "none")
    .style("fill", "#eeeeee");

  // Cost line + cost text.
  var costGroup = svg.append("g")
    .style("opacity", 0);

  // Cost line.
  costGroup.append("path")
    .attr("d", "M" + x(0) + " 2 l0 " + actualHeight)
    .style("stroke-dasharray", "4,4")
    .style("stroke", "black")
    .style("fill", "none")
    ;

  // Cost text.
  var costText = costGroup.append("text")
    .attr("x", x(0))
    .attr("y", 0)
    .style("text-anchor", "middle")
  ;

  // Bar group for each project.
  var project = svg.selectAll(".project")
    .data(knapsack_data)
  .enter().append("g")
    .attr("class", "project")
    .attr("transform", function(d) { return "translate(0," + y(d.id) + ")"; });

  // Each bar group consists of bars.
  var bar = project.selectAll("rect")
    .data(function(d) { return d.votes; });

  var barEnter = bar.enter().append("g")
      .attr("class", "knapsack-bar");

  // A rectangle for each bar.
  barEnter.append("rect")
    .attr("class", "knapsack-bar-rect")
    .attr("height", y.bandwidth())
    .attr("width", function(d) { return x(d[0]); })
    .style("fill", function(d) { return knapsackColor(d[2]); })
    .on("mouseover", handleMouseOver)
    .on("mouseout", handleMouseOut)
    ;

  // A text in each bar.
  barEnter.append("text")
    .attr("class", function(d) { return "knapsack-bar-text" + ((d[3] >= 100) ? "" : " knapsack-bar-text-hidden"); }) // If the cost diff is too small, hide it.
    .attr("x", function(d) { return x(d[0]) - x(d[3])/2; })
    .attr("dy", y.bandwidth() / 2 + 5)
    .text(function(d) { return numberWithDelimiter(d[2]); }); // Show the vote count.

  function update(highlighted, d, i) {
    bar.select(".knapsack-bar-rect")
      .style("opacity", function(d2, i2) {
        if (!highlighted)
          return 1;
        if (d[4] != d2[4]) // If the project IDs are different ...
          return 1;
        return (i != i2) ? 0.3 : 1;
      })
      ;
    bar.select(".knapsack-bar-text")
      .style("opacity", function(d2, i2) {
        if (!highlighted)
          return 1;
        if (d[4] != d2[4]) // If the project IDs are different ...
          return 1;
        return (i != i2) ? 0 : 1;
      })
      ;
    if (highlighted) {
      costGroup.style("opacity", 1).attr("transform", "translate(" + x(d[0]) + ",0)");
      costText.text(costWithDelimiter(d[0], currency_symbol));
    } else {
      costGroup.style("opacity", 0);
    }
  }

  // An allocation line for each project.
  /*
  project.append("path")
    .attr("class", "knapsack-bar-allocation")
    .attr("d", function(d) { return "M" + x(d.allocation) + " 0 l0," + (y.rangeBand()) + ""; })
    .attr("x", function(d) { return x(d.allocation); })
    .style("stroke", "red");
    */

  // Allocation line.
  svg.append("path")
    .attr("d", allocationPathData)
    .style("stroke", "#333")
    .style("stroke-width", "1.5")
    .style("fill", "none")
    ;

  function handleMouseOver(d, i) {
    update(true, d, i);
  }

  function handleMouseOut(d, i) {
    update(false);
  }

  // Knapsack pie chart
  /*
  var w = 600;
  var h = 600;
  var r = 250;
  var color = d3.scaleOrdinal(d3.schemeCategory10);
  var fundedProjects = knapsack_data.filter(function(project) { return project.allocation > 0; });
  var vis = d3.select('#knapsack-pieChart').append("svg").data([fundedProjects]).attr("width", w).attr("height", h).append("svg:g").attr("transform", "translate(" + (w/2) + "," + (h/2) + ")");
  var pie = d3.pie().value(function(d) { return d.allocation; }).sort(null);

  // declare an arc generator function
  var arc = d3.arc().innerRadius(0).outerRadius(r);

  // select paths, use arc generator to draw
  var arcs = vis.selectAll("g.slice").data(pie).enter().append("svg:g").attr("class", "slice");
  arcs.append("svg:path")
    .attr("fill", function(d, i) {
      if (d.data.id == 0) // the 'Remaining budget' project
        return '#ddd';
      return color(i);
    })
    .attr("d", function (d) {
      return arc(d);
    });

  var getAngle = function (d) {
    return ((d.endAngle + d.startAngle) / 2) % (2 * Math.PI);
  };
  arcs.append("svg:text")
    .attr("transform", function(d) {
      var angle = getAngle(d);
      var angle2 = (angle < Math.PI) ? (angle + Math.PI) : angle;
      return "translate(" + arc.centroid(d) + ") " + "rotate(" + (angle2*180/Math.PI+90) + ")";
    })
    .attr("text-anchor", function(d) {
      return (getAngle(d) > Math.PI) ? "end" : "start";
    })
    .attr("dx", function(d) {
      return ((r/2 - 30) * ((getAngle(d) > Math.PI) ? 1 : -1)) + "px";
    })
    .attr("dy", ".35em")
    .text(function(d, i) { return projects[idToIndex[fundedProjects[i].id]].title; });
  */
};

reloadKnapsackChart();

if (window.reloadCallbacks) {
  reloadCallbacks.push(function () {
    reloadKnapsackTable();
    reloadKnapsackChart();
  });
}
</script>
